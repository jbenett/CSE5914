// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Demo Result Item should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DemoResultItem
    author="author"
    contextPrefix=""
    id="id"
    image=""
    onHoverSuggestion={[MockFunction]}
    original="source"
    quote="text"
    removeSuggestion={[MockFunction]}
    takeSuggestion={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div>
        <div
          className="result-options"
          onClick={[Function]}
        >
          ⓧ
        </div>
        <p>
          "
          
           
          <span
            className="strike-through"
          >
            source
          </span>
           
          "
        </p>
        <p>
          "
          
           
          <ForwardRef>
             
            text
             
          </ForwardRef>
           
          "
        </p>
        <button
          onClick={[Function]}
          type="button"
        >
          Take Suggestion
        </button>
        <div
          className="result-profile"
        >
          <img
            className="profile-items profile-items--image"
            src=""
          />
          <p
            className="profile-items profile-items--text"
          >
            author
          </p>
        </div>
      </div>,
      "className": "result-item",
      "onMouseEnter": [Function],
      "onMouseLeave": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="result-options"
            onClick={[Function]}
          >
            ⓧ
          </div>,
          <p>
            "
            
             
            <span
              className="strike-through"
            >
              source
            </span>
             
            "
          </p>,
          <p>
            "
            
             
            <ForwardRef>
               
              text
               
            </ForwardRef>
             
            "
          </p>,
          <button
            onClick={[Function]}
            type="button"
          >
            Take Suggestion
          </button>,
          <div
            className="result-profile"
          >
            <img
              className="profile-items profile-items--image"
              src=""
            />
            <p
              className="profile-items profile-items--text"
            >
              author
            </p>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "ⓧ",
            "className": "result-options",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "ⓧ",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "\\"",
              "",
              " ",
              <span
                className="strike-through"
              >
                source
              </span>,
              " ",
              undefined,
              "\\"",
            ],
          },
          "ref": null,
          "rendered": Array [
            "\\"",
            "",
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "source",
                "className": "strike-through",
              },
              "ref": null,
              "rendered": "source",
              "type": "span",
            },
            " ",
            undefined,
            "\\"",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "\\"",
              "",
              " ",
              <ForwardRef>
                 
                text
                 
              </ForwardRef>,
              " ",
              undefined,
              "\\"",
            ],
          },
          "ref": null,
          "rendered": Array [
            "\\"",
            "",
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  " ",
                  "text",
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                "text",
                " ",
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "rules": Array [
                    "
  color: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.b",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "b",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            " ",
            undefined,
            "\\"",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Take Suggestion",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "Take Suggestion",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <img
                className="profile-items profile-items--image"
                src=""
              />,
              <p
                className="profile-items profile-items--text"
              >
                author
              </p>,
            ],
            "className": "result-profile",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "profile-items profile-items--image",
                "src": "",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "author",
                "className": "profile-items profile-items--text",
              },
              "ref": null,
              "rendered": "author",
              "type": "p",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          <div
            className="result-options"
            onClick={[Function]}
          >
            ⓧ
          </div>
          <p>
            "
            
             
            <span
              className="strike-through"
            >
              source
            </span>
             
            "
          </p>
          <p>
            "
            
             
            <ForwardRef>
               
              text
               
            </ForwardRef>
             
            "
          </p>
          <button
            onClick={[Function]}
            type="button"
          >
            Take Suggestion
          </button>
          <div
            className="result-profile"
          >
            <img
              className="profile-items profile-items--image"
              src=""
            />
            <p
              className="profile-items profile-items--text"
            >
              author
            </p>
          </div>
        </div>,
        "className": "result-item",
        "onMouseEnter": [Function],
        "onMouseLeave": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="result-options"
              onClick={[Function]}
            >
              ⓧ
            </div>,
            <p>
              "
              
               
              <span
                className="strike-through"
              >
                source
              </span>
               
              "
            </p>,
            <p>
              "
              
               
              <ForwardRef>
                 
                text
                 
              </ForwardRef>
               
              "
            </p>,
            <button
              onClick={[Function]}
              type="button"
            >
              Take Suggestion
            </button>,
            <div
              className="result-profile"
            >
              <img
                className="profile-items profile-items--image"
                src=""
              />
              <p
                className="profile-items profile-items--text"
              >
                author
              </p>
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "ⓧ",
              "className": "result-options",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "ⓧ",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "\\"",
                "",
                " ",
                <span
                  className="strike-through"
                >
                  source
                </span>,
                " ",
                undefined,
                "\\"",
              ],
            },
            "ref": null,
            "rendered": Array [
              "\\"",
              "",
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "source",
                  "className": "strike-through",
                },
                "ref": null,
                "rendered": "source",
                "type": "span",
              },
              " ",
              undefined,
              "\\"",
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "\\"",
                "",
                " ",
                <ForwardRef>
                   
                  text
                   
                </ForwardRef>,
                " ",
                undefined,
                "\\"",
              ],
            },
            "ref": null,
            "rendered": Array [
              "\\"",
              "",
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    " ",
                    "text",
                    " ",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " ",
                  "text",
                  " ",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "rules": Array [
                      "
  color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.b",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "b",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              " ",
              undefined,
              "\\"",
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Take Suggestion",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": "Take Suggestion",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <img
                  className="profile-items profile-items--image"
                  src=""
                />,
                <p
                  className="profile-items profile-items--text"
                >
                  author
                </p>,
              ],
              "className": "result-profile",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "profile-items profile-items--image",
                  "src": "",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "author",
                  "className": "profile-items profile-items--text",
                },
                "ref": null,
                "rendered": "author",
                "type": "p",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
